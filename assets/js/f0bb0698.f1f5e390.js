"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[922],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=m(r),b=a,f=c["".concat(l,".").concat(b)]||c[b]||u[b]||o;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=b;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var m=2;m<o;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},42837:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:5},i="Bone",p={unversionedId:"bone",id:"bone",title:"Bone",description:"Attributes",source:"@site/docs/bone.md",sourceDirName:".",slug:"/bone",permalink:"/docs/bone",draft:!1,editUrl:"https://github.com/smartbone-org/SmartBone-2/edit/main/docs/bone.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"SmartWeld",permalink:"/docs/smartweld"},next:{title:"Optimization",permalink:"/docs/optimization"}},l={},m=[{value:"Attributes",id:"attributes",level:3}],s={toc:m},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bone"},"Bone"),(0,a.kt)("h3",{id:"attributes"},"Attributes"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Attributes which can be set per bone, these aren't required.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"Boolean"),"]"," XAxisLocked - If this is true then the bone cannot move on the x axis relative to the root part.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"Boolean"),"]"," YAxisLocked - If this is true then the bone cannot move on the y axis relative to the root part.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"Boolean"),"]"," ZAxisLocked - If this is true then the bone cannot move on the z axis relative to the root part.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"NumberRange"),"]"," XAxisLimits - The limit on which the bone can travel on the x axis relative to the root part, default is -inf, inf.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"NumberRange"),"]"," YAxisLimits - The limit on which the bone can travel on the y axis relative to the root part, default is -inf, inf.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"NumberRange"),"]"," ZAxisLimits - The limit on which the bone can travel on the z axis relative to the root part, default is -inf, inf.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"Number"),"]"," Radius - The radius of the bone, default is 0.25.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"Number"),"]"," RotationLimit - The maximum rotated offset a bone can be from its parent, default is 180\xb0.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"Vector3"),"]"," Force - Overrides the force attribute on the root object")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"[",(0,a.kt)("em",{parentName:"p"},"Vector3"),"]"," Gravity - Overrides the gravity attribute on the root object"))))}u.isMDXComponent=!0}}]);